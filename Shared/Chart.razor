@using System.Drawing
<svg width="@Width" height="@Height" style="background-color:rgb(220,220,220);">
    <g transform="translate(0, @Height) scale(1,-1)">
        <g style="fill:green;" transform="translate(@TranslateX, @ZoomControlHeight) scale(@XScaleZoom, @ChartScale)"> @*Y = 0 is at the top by default. transformation puts it at the bottom*@
            if (DataPoints != null)
            {
            @foreach (var n in Enumerable.Range(0, DataPoints.Count()))
            {
                <rect style="fill:@DataPoints.ElementAt(n).Color;" width="@BarWidth" x="@((BarWidth+BarSpace)*n)" y="@DataPoints.ElementAt(n).MinPrice" height="@DataPoints.ElementAt(n).Difference" @onmousemove="args=>BarOver(DataPoints.ElementAt(n), args)" />
            }
            }
        </g>
        <g transform="scale(@XScale,@ZoomControlScale)"> 
            if (DataPoints != null)
            {
            @foreach (var n in Enumerable.Range(0, DataPoints.Count()))
            {
                <rect style="fill:@DataPoints.ElementAt(n).Color;" width="@BarWidth" x="@((BarWidth+BarSpace)*n)" y="@DataPoints.ElementAt(n).MinPrice" height="@DataPoints.ElementAt(n).Difference" />
            }
            }
        </g>
        <g @onmousemove="MouseMove">
            <rect style="stroke: black;fill:transparent;" width="@Width" height="@ZoomControlHeight" />
            <rect style="fill:black;opacity:20%;"x="@RangeStart" width="@(RangeEnd-RangeStart)" height="@ZoomControlHeight" @onmousedown="SelectRangeSelector" />
            <rect style="fill:rgb(0,255,0);"  width="6" x="@RangeStart" height="@ZoomControlHeight" @onmousedown="SelectStartMarker" /> 
            <rect style="fill:rgb(255,0,0);" transform="translate(-6,0)" width="6" x="@RangeEnd" height="@ZoomControlHeight" @onmousedown="SelectEndMarker" /> @*The Translate here is to keep it visible*@
        </g>
    </g>
</svg>

@code {
    //Mixing of decimal and double types is because financial you stick with decimal, and for rendering, we use floating point (single or double precision).
    //And because I'm fucking lazy and don't want to do casting in expressions above, I'm doing it here. 
    public class ChartData
    {
        IEnumerable<KeyValuePair<string, double>> DataPoints { get; set; } = new List<KeyValuePair<string, double>>();
    }

    public class PriceRange : ChartData
    {
        public decimal MinPrice { get; set; }
        public decimal MaxPrice { get; set; }
        public decimal MidPrice
        {
            get => MinPrice + (MaxPrice - MinPrice) / 2;
        }
        public double Difference
        {
            get => (double)(MaxPrice - MinPrice);
        }

        public string Color { get; set; }
    }

    [Parameter]
    public double Height { get; set; } = 500;

    [Parameter]
    public double Width { get; set; }

    public enum ChartTypeEnum
    {
        CandleStick,
        Pie,
        Bar,
        Line,
        Donut
    }

    double ChartScale { get => ChartHeight / MaxY; }
    double ZoomControlScale { get => (ZoomControlHeight / Height) * ChartScale; }

    public ChartTypeEnum ChartType { get; set; } = ChartTypeEnum.CandleStick;

    [Parameter]
    public bool ShowZoomControl { get; set; } = true;

    [Parameter]
    public double ZoomControlHeight { get; set; } = 100;

    bool ZoomVisible
    {
        get => ShowZoomControl && (ChartType == ChartTypeEnum.Line || ChartType == ChartTypeEnum.CandleStick);
    }

    double ChartHeight
    {
        get
        {
            if (ZoomVisible)
                return Height - ZoomControlHeight;
            return Height;
        }
    }

    IEnumerable<PriceRange>? _dataPoints = null;

    //float ZoomControlScale = 0.25f;

    void BarOver(PriceRange r, MouseEventArgs e)
    {
        Console.WriteLine($"{r.MinPrice}:{ChartHeight}");
        if (BarMouseOver != null)
            BarMouseOver(r);
    }

    [Parameter]
    public Action<PriceRange>? BarMouseOver {get;set;} = null;

    void MouseMove(MouseEventArgs e)
    {
        if (e.Buttons == 1)
        {
            if (RangeSelectorSelected)
            {
                if (e.OffsetX - MouseDownX + RangeStart > 0 && e.OffsetX - MouseDownX + RangeEnd < Width)
                {
                    RangeStart += e.OffsetX - MouseDownX;
                    RangeEnd += e.OffsetX - MouseDownX;
                    MouseDownX = e.OffsetX;
                }
            }
            else
            {
                if (StartMarkerSelected)
                    RangeStart = e.OffsetX;
                else
                    RangeEnd = e.OffsetX;
            }
            //Console.WriteLine("{0}:{1}:{2}:{3}:{4}", RangeStart, ComputedWidth, XScale, XScaleZoom, TranslateX);
        }
    }

    bool StartMarkerSelected = true;
    bool RangeSelectorSelected = false;
    double MouseDownX = 0;

    void SelectRangeSelector(MouseEventArgs e)
    {
        RangeSelectorSelected = true;
        MouseDownX = e.OffsetX;
    }

    void SelectStartMarker(MouseEventArgs e)
    {
        StartMarkerSelected = true;
        RangeSelectorSelected = false;
    }

    void SelectEndMarker(MouseEventArgs e)
    {
        StartMarkerSelected = false;
        RangeSelectorSelected = false;
    }

    double TranslateX { get => -RangeStart * XScaleZoom / XScale; }

    double _rangeEnd = double.MinValue;
    double _rangeStart = double.MaxValue;

    double RangeStart
    {
        get => _rangeStart == double.MaxValue ? 0 : _rangeStart;
        set
        {
            if (value < RangeEnd)
            {
                _rangeStart = value;
            }
        }
    }
    double RangeEnd
    {
        get => _rangeEnd == double.MinValue ? Width : _rangeEnd;
        set
        {
            if (value > RangeStart)
            {
                _rangeEnd = value;
            }
        }
    }

    [Parameter]
    public IEnumerable<PriceRange>? DataPoints
    {
        get => _dataPoints;
        set
        {
            _dataPoints = value;
            MinY = (double)_dataPoints!.Min(p => p.MinPrice);
            MaxY = (double)_dataPoints!.Max(p => p.MaxPrice);
        }
    }

    int BarWidth = 10;
    int BarSpace = 2;

    double MinY { get; set; }
    double MaxY { get; set; }

    double ComputedWidth { get => DataPoints!.Count() * (BarWidth + BarSpace); }

    double XScale
    {
        get => Width / ComputedWidth;
    }


    double XScaleZoom
    {
        get => XScale / ((RangeEnd - RangeStart) / Width);
    }

    }

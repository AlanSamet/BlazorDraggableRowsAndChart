@typeparam TData where TData : class
<div style="user-select: none;">
    @if (ItemsSource != null)
    {
        @foreach(var item in ItemsSource)
        {
            <div style="border: 1px solid red;cursor:move;" draggable="true" @ondragover="args => DragOver(item,args)" @ondragstart="args=>SelectedItem=item" @ondragend="args=>SelectedItem=null">
                @ItemTemplate(item)
            </div>
        }
    }
</div>
@code {
    TData? SelectedItem = null;

    [Parameter]
    public EventCallback OnOrderChanged { get; set; }

    void DragOver(TData item, DragEventArgs e) //or async Task if you're doing any await stuff.
    {
        if (SelectedItem != null)
        {
            var itemIndex = ItemsSource!.IndexOf(item);
            var selectedItemIndex = ItemsSource!.IndexOf(SelectedItem);

            if (itemIndex == selectedItemIndex)
                return;

            ItemsSource.Remove(SelectedItem);
            ItemsSource.Insert(itemIndex, SelectedItem);

            OnOrderChanged.InvokeAsync();
        }
    }

    [Parameter]
    public List<TData>? ItemsSource { get; set; }

    [Parameter]
    public RenderFragment<TData>? ItemTemplate { get; set; }
}
